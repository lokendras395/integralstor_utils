from integralstor_utils import command, config, file_processing
import glob
import re
import os
import pprint


def rescan_drives():
    """Initiate a system rescan of all drives."""
    try:
        for dirname, dirs, files in os.walk('/sys/class/scsi_host/'):
            # print dirs
            for dir in dirs:
                # print '/sys/class/scsi_host/%s/scan'%dir
                with open('/sys/class/scsi_host/%s/scan' % dir, 'w') as f:
                    # print '/sys/class/scsi_host/%s/scan'%dir
                    f.write('- - -')
                    f.close()
    except Exception, e:
        return False, "Error rescanning drives : %s" % str(e)
    else:
        return True, None


def get_all_disks_by_name():
    """Get all disks by their sd* names

    Returns a list of all disks by name (sda/sbd, etc) in the sytem
    """
    dl = []
    try:
        cmd_dl = "/usr/sbin/smartctl --scan"
        (ret, rc), err = command.execute_with_rc(cmd_dl)
        if err:
            raise Exception(err)
        disk_list, err = command.get_output_list(ret)
        if err:
            raise Exception(err)
        usb_list, err = get_all_usb_disks_by_name()
        if err:
            raise Exception(err)
        if usb_list != []:
            disk_list = usb_list + disk_list
        if ret:
            # Regex to capture "/dev/sdX"
            reg_exp_dl = re.compile("(/dev/[a-z]+)")

            for line in disk_list:
                d = {}
                if reg_exp_dl.search(line):
                    result_dl = re.search(r'/dev/sd[a-z]+', line)
                    result_dl1 = re.search(r'/dev/(sd[a-z]+)', line)
                    if result_dl:
                        d["full_path"] = result_dl.group()
                        dname = result_dl1.groups()[0]
                        r = re.match('^sd[a-z]+', dname)
                        d["name"] = r.group()
                        dl.append(d)
        # print "disk list info: ", dl
    except Exception, e:
        return None, "Error retrieving disks by name : %s" % str(e)
    else:
        return dl, None


def get_all_usb_disks_by_name():
    try:
        cmd = 'readlink -f /dev/disk/by-id/usb* | grep -w "/dev/[a-z]*"'
        usbl, err = command.get_command_output(cmd, shell=True)
        if err:
            raise Exception(err)
        elif usbl[0] != "/dev/disk/by-id/usb*":
            usb_name = usbl
        elif usbl[0] == "/dev/disk/by-id/usb*":
            usb_name = []
    except Exception, e:
        return None, "Error getting USB names: %s" % str(e)
    else:
        return usb_name, None


def get_disk_ids(disk_name):
    """Returns the /dev/disk/by-id entries corresponding to the name supplied"""
    ids = []
    try:
        supplied_path = '/dev/%s' % disk_name
        for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-id'):
            for file in filenames:
                real_path = os.path.realpath('%s/%s' % (dirpath, file))
                if real_path == supplied_path:
                    ids.append(file)
    except Exception, e:
        return None, "Error retrieving disk ID : %s" % str(e)
    else:
        return ids, None


def get_disk_scsi_info(disk_name):
    """Returns the /dev/disk/by-path entries corresponding to the name supplied."""
    scsi_info_list = []
    try:
        scsi_info = None
        supplied_path = '/dev/%s' % disk_name
        for (dirpath, dirnames, filenames) in os.walk('/sys/bus/scsi/drivers/sd'):
            for dir in dirnames:
                for (dpath, dnames, fnames) in os.walk('%s/%s/block' % (dirpath, dir)):
                    for d in dnames:
                        if d == disk_name:
                            scsi_info = dir
                            break
                    if scsi_info:
                        break
                if scsi_info:
                    break
            if scsi_info:
                break
        if scsi_info:
            l = scsi_info.split(':')
            if l:
                for comp in l:
                    scsi_info_list.append(int(comp))
    except Exception, e:
        return None, "Error retrieving disk SCSI info : %s" % str(e)
    else:
        return scsi_info_list, None


def get_disk_uuids(disk_name):
    """Returns the /dev/disk/by-uuid entries corresponding to the name supplied."""
    uuids = []
    try:
        supplied_path = '/dev/%s' % disk_name
        for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-uuid'):
            for file in filenames:
                real_path = os.path.realpath('%s/%s' % (dirpath, file))
                if real_path == supplied_path:
                    uuids.append(file)
    except Exception, e:
        return None, "Error retrieving disk UUID : %s" % str(e)
    else:
        return uuids, None


def is_rotational(disk_name):
    """Given a disk name like sda, returns true if its a rotational device"""
    rotational = True
    try:
        if not disk_name:
            raise Exception(
                "Disk name not specified. Could not determine rotational status")
        if os.path.isfile('/sys/block/%s/queue/rotational' % disk_name):
            with open('/sys/block/%s/queue/rotational' % disk_name) as f:
                str = f.read()
                if str.strip() == "1":
                    rotational = True
                else:
                    rotational = False
        else:
            raise Exception(
                "Configuration error. Rotational parameter not set for disk %s" % disk_name)
    except Exception, e:
        return None, "Error checking disk rotational status : %s" % str(e)
    else:
        return rotational, None


def get_capacity(name):
    """Given the name of a disk (like sda) OR a partition (like sda2), returns the capacity"""
    capacity = None
    try:
        # Get the storage capacity
        st1 = os.popen("/sbin/fdisk -l /dev/%s | grep Disk" % name)
        str2 = st1.read()
        disk_capacity = re.search(r'\s[0-9]+[\.0-9]*\s[a-zA-Z]+', str2)
        if disk_capacity:
            capacity = (disk_capacity.group()).strip()
        else:
            capacity = -1
    except Exception, e:
        return None, "Error getting disk capacity : %s" % str(e)
    else:
        return capacity, None


def get_all_partitions():
    """Get all partitions on all the disks"""
    partitions_list = []
    try:
        with open('/proc/partitions', 'r') as f:
            i = 0
            for line in f:
                if i == 0:
                    i += 1
                    continue
                if not line.strip():
                    continue
                comps = line.split()
                if len(comps) >= 4:
                    partitions_list.append(comps[3])
    except Exception, e:
        return None, "Error getting all partitions: %s" % str(e)
    else:
        return partitions_list, None


def get_partitions(disk_name):
    """Given a disk name like sda, returns all the partitions info like partition name, capacity, etc."""
    l = []
    try:
        if not disk_name:
            raise Exception(
                "No disk name specified so cannot retrieve partitions")
        supplied_path = '/dev/%s' % disk_name
        id_list = []
        for (dirpath, dirnames, filenames) in os.walk('/dev/disk/by-id'):
            id_list = filenames
            break
        for id1 in id_list:
            if (not id1.startswith('scsi')) and (not id1.startswith('ata')) and (not id1.startswith('wwn')) and (not id1.startswith('usb')):
                continue
            name = os.path.split(os.path.normpath(
                os.path.realpath('/dev/disk/by-id/%s' % id1)))[1]
            if disk_name not in name:
                continue
            if 'part' not in id1:
                continue
            d = {}
            d['name'] = name
            capacity, err = get_capacity(name)
            if err:
                raise Exception(err)
            if capacity:
                d["capacity"] = capacity
            l.append(d)
    except Exception, e:
        return None, "Error retrieving partitions : %s" % str(e)
    else:
        return l, None


def get_serial_number(disk_name):
    """Given a disk by name, get its serial number."""
    serial_number = None
    try:
        """
        ids, err = get_disk_ids(disk_name)
        if err:
          raise Exception(err)
        id1 = None
        id = None
        if ids:
          for id1 in ids:
            if (id1.startswith('scsi')) or (id1.startswith('ata')):
              id = id1
              break
        if id:
          parts = id.split('_')
          if len(parts) >= 3:
            serial_number = parts[2]
        """
        cmd = 'udevadm info -q property -n %s | grep -ie ID_SERIAL_SHORT | cut -d "=" -f2' % disk_name
        ret, err = command.get_command_output(cmd, shell=True)
        if err:
            raise Exception(err)
        if ret:
            serial_number = ret[0]
        if not serial_number:
            # Cant get it this way for some SAS drives so try smartctl
            cmd_disk = "/usr/sbin/smartctl -H -i /dev/%s" % disk_name
            dl_output = os.popen(cmd_disk).read()
            lines = re.split("\r?\n", dl_output)

            for line in lines:
                # In case of a SAS drive, status comes with a different string
                # so ..
                res = re.match('Serial Number:[\s]*([\S]*)', line)
                if not res:
                    # For SAS drives, we get a lower case number, *&^@*&^
                    res = re.match('Serial number:[\s]*([\S]*)', line)
                if res:
                    tup = res.groups()
                    if tup:
                        serial_number = tup[0]
        if serial_number:
            serial_number = serial_number.upper()
    except Exception, e:
        return None, "Error retrieving serial number : %s" % str(e)
    else:
        return serial_number, None


def get_smart_status(disk_name):
    """Given a disk by name, get its S.M.A.R.T status."""
    status = None
    try:
        cmd_disk = "/usr/sbin/smartctl -H -i /dev/%s" % disk_name
        dl_output = os.popen(cmd_disk).read()
        lines = re.split("\r?\n", dl_output)
        reobj2 = re.compile(".*self-assessment.*")

        for line in lines:
            # In case of a SAS drive, status comes with a different string so
            # ..
            res = re.match('SMART Health Status: ([\w\W ]*)$', line)
            if res:
                tup = res.groups()
                if tup:
                    status = tup[0]
            if not status:
                if reobj2.search(line):
                    ent = re.search(r'\s[A-Z]+', line)
                    status = (ent.group()).strip()
    except Exception, e:
        return None, "Error getting disk S.M.A.R.T status : %s" % str(e)
    else:
        return status, None


def get_all_mounted_devices():
    """Get all mounted devices. """
    mounted_devices = []
    try:
        with open('/proc/mounts', 'r') as f:
            for line in f:
                if not line.strip():
                    continue
                comps = line.split()
                if len(comps) >= 1:
                    dev = comps[0]
                    if '/dev/' not in dev:
                        continue
                    device = dev[5:]
                    mounted_devices.append(device)
    except Exception, e:
        return None, "Error getting all mounted devices: %s" % str(e)
    else:
        return mounted_devices, None


def get_swap_devices():
    """Get the device being used for swap."""
    swap_devices = []
    try:
        with open('/proc/swaps', 'r') as f:
            i = 0
            for line in f:
                if i == 0:
                    i += 1
                    continue
                if not line.strip():
                    continue
                comps = line.split()
                if comps[1].strip().lower() == 'partition' and '/dev/' in comps[0]:
                    swap_devices.append(comps[0][5:])
    except Exception, e:
        return None, "Error getting swap devices: %s" % str(e)
    else:
        return swap_devices, None


def get_mdraid_info(device):
    """Get the devices that are part of the mdraids."""
    raid_list = []
    try:
        lines, err = command.get_command_output(
            'mdadm --detail /dev/%s' % device)
        if not err:
            for line in lines:
                # print line
                if line.startswith('/dev/%s' % device):
                    continue
                if not line.strip():
                    continue
                if not ':' in line:
                    # print line
                    comps = line.split()
                    if len(comps) > 5:
                        raid_list.append(comps[-1][5:])
    except Exception, e:
        return None, "Error getting mdraid information: %s" % str(e)
    else:
        return raid_list, None


def get_os_devices():
    """Get all the devices that hold the OS and swap."""
    os_devices = []
    try:
        check_devices = []
        pl, err = get_all_partitions()
        if err:
            raise Exception(err)
        md, err = get_all_mounted_devices()
        if err:
            raise Exception(err)
        for dev in md:
            if dev in pl:
                check_devices.append(dev)
        sd, err = get_swap_devices()
        if err:
            raise Exception(err)
        for dev in sd:
            if dev in pl and dev not in check_devices:
                check_devices.append(dev)
        for dev in check_devices:
            # If it is a mdraid device, get the underlying devices
            dl, err = get_mdraid_info(dev)
            if dl:
                os_devices.extend(dl)
            else:
                os_devices.append(dev)
    except Exception, e:
        return None, "Error getting OS devices : %s" % str(e)
    else:
        return os_devices, None


def get_disk_info(disk_name):
    """Get all details about a disk given its name """

    # Given a disk name like sda, get the disk info
    return_list = []
    try:
        ids, err = get_disk_ids(disk_name)
        if err:
            raise Exception(err)
        disk_id = None
        if ids:
            for id in ids:
                if id.startswith('scsi'):
                    disk_id = id
                    break
        if not disk_id:
            for id in ids:
                if id.startswith('ata'):
                    disk_id = id
                    break
        if not disk_id:
            for id in ids:
                if id.startswith('wwn'):
                    disk_id = id
                    break
        if not disk_id:
            for id in ids:
                if id.startswith('usb'):
                    disk_id = id
                    break

        capacity, err = get_capacity(disk_name)
        if err:
            raise Exception(err)

        rotational, err = is_rotational(disk_name)
        if err:
            raise Exception(err)

        partitions, err = get_partitions(disk_name)
        if err:
            raise Exception(err)

        scsi_info, err = get_disk_scsi_info(disk_name)
        if err:
            raise Exception(err)

        raid = False
        hw_platform, err = config.get_hardware_platform()
        if hw_platform and hw_platform == 'dell':
            from platforms import dell
            disk_hw_info_all, err = dell.get_all_disks(0)
            raid_to_unix_mapping, err = dell.get_hardware_raid_to_unix_mapping()
            if raid_to_unix_mapping and '/dev/%s' % disk_name in raid_to_unix_mapping.keys():
                # Its a hardware RAID so pull the underlying info
                raid = True
                controller_id = raid_to_unix_mapping['/dev/%s' %
                                                     disk_name]['controller_number']
                device_id = raid_to_unix_mapping['/dev/%s' %
                                                 disk_name]['device_id']
                disk_list, err = dell.get_hardware_raid_hard_drives(
                    controller_id, device_id)
                if disk_list:
                    for disk in disk_list:
                        disk_dict = {}
                        disk_dict['serial_number'] = disk['serial_number']
                        disk_dict['name'] = disk_name
                        disk_dict['path'] = '/dev/%s' % disk_name
                        disk_dict['id'] = disk_id
                        disk_dict['capacity'] = capacity
                        disk_dict['rotational'] = rotational
                        disk_dict['partitions'] = partitions
                        disk_dict['status'] = disk['status']
                        disk_dict['scsi_info'] = scsi_info
                        disk_dict['hw_raid'] = True
                        if disk_hw_info_all and disk['serial_number'] in disk_hw_info_all.keys():
                            disk_dict['target_id'] = disk_hw_info_all[disk['serial_number']]['target_id']
                            disk_dict['enclosure_id'] = disk_hw_info_all[disk['serial_number']
                                                                         ]['enclosure_id']
                            disk_dict['channel'] = disk_hw_info_all[disk['serial_number']]['channel']
                        return_list.append(disk_dict)
        if not raid:
            disk_dict = {}
            disk_dict['name'] = disk_name
            disk_dict['hw_raid'] = False
            disk_dict['path'] = '/dev/%s' % disk_name
            disk_dict['id'] = disk_id
            disk_dict['capacity'] = capacity
            serial_number, err = get_serial_number(disk_name)
            if err:
                raise Exception(err)
            disk_dict['serial_number'] = serial_number
            disk_dict['rotational'] = rotational
            disk_dict['partitions'] = partitions
            status, err = get_smart_status(disk_name)
            if err:
                raise Exception(err)
            disk_dict['status'] = status
            disk_dict['scsi_info'] = scsi_info
            usb_list, err = get_all_usb_disks_by_name()
            if err:
                raise Exception(err)
            if usb_list != []:
                mounted, err = is_mounted(disk_name)
                if err:
                    raise Exception(err)
                for i in usb_list:
                    if i[+5:] == disk_name:
                        if disk_dict['partitions'] != []:
                            for i in disk_dict['partitions']:
                                fs_type, err = get_file_system_by_name(
                                    '/dev/%s' % i['name'])
                                mounted, err = is_mounted(
                                    '/dev/%s' % i['name'])
                                i['is_mounted'] = mounted
                                i['fs_type'] = fs_type
                        else:
                            disk_dict['is_mounted'] = mounted
                        disk_dict['usb'] = True
            if hw_platform and hw_platform == 'dell':
                if disk_hw_info_all and serial_number in disk_hw_info_all.keys():
                    disk_dict['target_id'] = disk_hw_info_all[serial_number]['target_id']
                    disk_dict['enclosure_id'] = disk_hw_info_all[serial_number]['enclosure_id']
                    disk_dict['channel'] = disk_hw_info_all[serial_number]['channel']
            return_list.append(disk_dict)

    except Exception, e:
        return None, "Error getting disk information : %s" % str(e)
    else:
        return return_list, None


def get_disk_info_all():
    """Get all details about all disks

    Returns a structured dict for every disk that is alive
    """
    return_dict = {}
    try:
        out, err = rescan_drives()
        if err:
            raise Exception(err)

        all_disks, err = get_all_disks_by_name()
        if err:
            raise Exception(err)
        for disk_dict in all_disks:
            disk_list, err = get_disk_info(disk_dict['name'])
            if err:
                raise Exception(err)
            for disk_info in disk_list:
                if disk_info is not None and 'serial_number' in disk_info:
                    return_dict[disk_info['serial_number']] = disk_info

        os_devices, err = get_os_devices()
        for sn, disk in return_dict.items():
            if 'partitions' not in disk:
                continue
            for partition in disk['partitions']:
                if partition['name'] in os_devices:
                    disk['os_device'] = True
        if err:
            raise Exception(err)

    except Exception, e:
        return None, "Error getting complete disk information : %s" % str(e)
    else:
        return return_dict, None


def is_mounted(disk_name):
    """Given a disk name like sda, returns true if its mounted"""
    try:
        dev_list, err = get_all_mounted_devices()
        if err:
            raise Exception(err)
        for dev_name in dev_list:
            if dev_name == disk_name:
                is_mounted = True
                break
            elif dev_name == disk_name[5:]:
                is_mounted = True
                break
        else:
            is_mounted = False
    except Exception, e:
        return None, "Error checking if the disk is mounted %s: %s" % (disk_name, str(e))
    else:
        return is_mounted, None


def get_file_system_by_name(disk_name):
    """get file system type by providing disk name or partition/disk name, returns None if no file system present"""
    fs_type = None
    try:
        cmd = "blkid %s -s TYPE -o value" % disk_name
        fstype_list, err = command.get_command_output(cmd, shell=True)
        if err:
            raise Exception(err)
        if len(fstype_list) == 1:
            fs_type = fstype_list[0]
        if fstype_list == []:
            fs_type = None
        else:
            raise Exception(
                "Unable to retrieve flie system type of: %s" % disk_name)
    except Exception, e:
        return None, "Error retrieving file system type of disk: %s" % str(e)
    else:
        return fs_type, None


def mount_disk_by_name(disk_name, path=None):
    """Mount the disk by disk name, returns True if successfullly mounted and False if already mounted"""
    try:
        file_system, err = get_file_system_by_name(disk_name)
        if err:
            raise Exception(err)
	if file_system == None:
	    raise Exception("there is not filesystem present on %s"%disk_name)
        serial_num, err = get_serial_number(disk_name)
        if err:
            raise Exception(err)
        if path == None:
            path = '/media/%s%s' % (serial_num, disk_name[4:])
        status, errq = file_processing.get_or_create_dir(path)
        if err:
            raise Exception(err)
        mounted, err = is_mounted(disk_name)
        if err:
            raise Exception(err)
        if mounted == False:
            cmd = "mount -t %s %s %s" % (file_system, disk_name, path)
            output, err = command.execute(cmd, shell=False)
            if err:
                raise Exception(err)
            ret_val = True
        else:
            ret_val = False
    except Exception, e:
        return None, "Unable to mount disk %s : %s" % (disk_name, str(e))
    else:
        return ret_val, None


def get_mount_point_by_name(disk_name):
    """Get mount poin of disk by name"""
    try:
        cmd = "cat /proc/mounts | grep %s" % disk_name
        output, err = command.get_command_output(cmd, shell=True)
        if err:
            raise Exception("Disk is not mounted")
        if output is not None:
            if len(output) > 1:
                raise Exception(
                    "Disk have multiple partition, enter partiton name")
            else:
                mountpoint = output[0].split()[1]
    except Exception, e:
        return None, "unable to get mountpoint of %s : %s" % (disk_name, str(e))
    else:
        return mountpoint, None


def unmount_disk_by_name(disk_name):
    """Unmount disk by name, it returns True if successfuly unmounted and False if already unmounted"""
    try:
        mounted, err = is_mounted(disk_name)
        if err:
            raise Exception(err)
        elif mounted == True:
            mount_dir, err = get_mount_point_by_name(disk_name)
            if err:
                raise Exception(err)
            cmd_a = "umount %s" % disk_name
            output, err = command.get_command_output(cmd_a, shell=True)
            if err:
                raise Exception(err)
            cmd_b = 'rmdir %s' % mount_dir
            output, err = command.get_command_output(cmd_b, shell=True)
            if err:
                if 'No such file or directory' in err:
                    pass
                else:
                    raise Exception(err)
            ret_val = True
        else:
            ret_val = mounted
    except Exception, e:
        return None, "Unable to unmount disk %s : %s" % (disk_name, str(e))
    else:
        return ret_val, None


def get_supported_mkfs_file_systems():
    """returns list of mkfs supported file systems"""
    mkfs_lst = []
    try:
        for name in glob.glob('/sbin/mkfs.*'):
            mkfs_lst.append(name[+11:])
    except Exception, e:
        return None, "Unable to get mkfs list: %s" % str(e)
    else:
        return mkfs_lst, None


def format_disk_by_name(disk_name, ftype):
    """Format_disk_by_name"""
    try:
        status, err = is_mounted(disk_name)
        if err:
            raise Exception(err)
        if status == True:
            raise Exception("Device is mounted; will not make a filesystem here!")
#        if status == True:
#            d, err = unmount_disk_by_name(disk_name)
#            if err:
#                raise Exception(err)
        else:
            if ftype == 'vfat':
                cmd = "mkfs -t %s -I %s" % (ftype, disk_name)
            elif ftype == 'xfs' or ftype == 'btrfs':
                cmd = "mkfs -t %s -f %s" % (ftype, disk_name)
            elif ftype == '':
                cmd = "mkfs %s" % disk_name
            else:
                cmd = "mkfs -t %s %s" % (ftype, disk_name)
            output, err = command.execute_with_conf(cmd, response='y')
            if err:
                raise Exception(err)
    except Exception, e:
        return False, "Unable to format disk %s : %s" % (disk_name, str(e))
    else:
        return True, None


def main():
    pass
    pp = pprint.PrettyPrinter(indent=4)
    #d, err = get_all_disks_by_name()
    #d, err = get_all_usb_disks_by_name()
    #d, err = get_disk_ids('sda')
    #d, err = get_disk_uuids('sde1')
    # print 'Disks by name : '
    # print get_disks_by_name()
    # print 'Disks by id : '
    # print  _get_disk_info_list()
    # print 'is rotational: '
    # print is_rotational('sde')
    # print get_capacity('sde')
    # print get_serial_number_and_status('sda')
    # print is_rotational('sdc')
    # print get_serial_number('sdh')
    # print get_serial_number('sde')
    # print get_smart_status('sda')
    # print get_smart_status('sde')
    # print get_disk_scsi_info('sde')
    # print get_disk_scsi_info('sda')
    # print get_disk_scsi_info('sdb')
    #d, err = get_file_system_by_name('/dev/sdf4')
    d, err = mount_disk_by_name('/dev/sdf4',path=None)
    #d, err = unmount_disk_by_name('/dev/sdh')
    #d, err = get_supported_mkfs_file_systems()
    #d, err = format_disk_by_name('/dev/sde','ext2')
    #d, err = is_mounted('/dev/sdf1')
    #d, err = get_mount_point_by_name('/dev/sdh2')
    # print 'Disk info: '
    #d, err = get_disk_info('sde')
    # print err
    # pp.pprint(d)
    #d, err = get_disk_info_all()
    #d, err = get_all_partitions()
    #d, err = get_all_mounted_devices()
    #d, err = get_swap_devices()
    #d, err = get_mdraid_info('sda')
    #d, err = get_os_devices()
    print err
    pp.pprint(d)
    # print 'Disk partitions: '
    # print get_partitions('sdf')
    #r, err = _diskmap()
    # print r, err
    # print get_rootfs_device()
    # rescan_drives()


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
